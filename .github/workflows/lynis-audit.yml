name: Lynis Security Audit

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 0 * * 0'  # Run every Sunday

jobs:
  security-audit:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write  # Required for Firebase
      issues: write    # Added for issue creation

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Firebase CLI
        run: |
          npm install -g firebase-tools@latest
          # Ensure proper JSON formatting of credentials
          echo '${{ secrets.FIREBASE_CREDENTIALS }}' > "${HOME}/firebase_credentials.json"
          # Validate JSON format
          cat "${HOME}/firebase_credentials.json" | jq '.'

      - name: Install Google Cloud SDK and jq
        run: |
          # Install jq for JSON validation
          sudo apt-get update && sudo apt-get install -y jq
          
          # Install Google Cloud SDK
          echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
          curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -
          sudo apt-get update && sudo apt-get install -y google-cloud-sdk
          
          # Authenticate with service account
          gcloud auth activate-service-account --key-file="${HOME}/firebase_credentials.json" --project=flutter-firebase-auth-b4967

      - name: Setup Firebase
        run: |
          # Set credentials
          export GOOGLE_APPLICATION_CREDENTIALS="${HOME}/firebase_credentials.json"
          
          # Initialize Firebase with service account
          firebase init --token "${{ secrets.FIREBASE_TOKEN }}" --non-interactive --project flutter-firebase-auth-b4967 || true
          
          # Set project
          firebase projects:list --token "${{ secrets.FIREBASE_TOKEN }}" || true
          firebase use flutter-firebase-auth-b4967 --token "${{ secrets.FIREBASE_TOKEN }}" || true
          
          # Verify authentication
          firebase login:list --token "${{ secrets.FIREBASE_TOKEN }}" || true

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install dependencies and build Docker image
        run: |
          python -m pip install --upgrade pip
          pip install matplotlib numpy
          docker build -t lynis-audit .

      - name: Simulate security risk
        run: ./simulate_risk.sh

      - name: Setup Firebase CLI (official)
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: '${{ secrets.GITHUB_TOKEN }}'
          firebaseServiceAccount: '${{ secrets.FIREBASE_CREDENTIALS }}'
          channelId: live
          projectId: flutter-firebase-auth-b4967

      - name: Run Lynis audit
        run: |
          # Create logs directory if it doesn't exist
          mkdir -p logs
          
          # Run Lynis audit and save output
          docker run --rm --cap-add=SYS_ADMIN --cap-add=AUDIT_CONTROL -v /tmp:/tmp lynis-audit > lynis-result.txt || true
          docker run --rm lynis-audit lynis --version || true
          
          # Run analysis and generate summary
          python3 analyze_lynis.py || true
          
          # Run final audit
          TIMESTAMP=$(date +%Y%m%d_%H%M%S)
          docker run --rm \
            --cap-add=SYS_ADMIN \
            --cap-add=AUDIT_CONTROL \
            -v "$(pwd)/logs:/audit/logs" \
            lynis-audit || true

      - name: Upload results to Firebase Storage
        if: always()
        run: |
          # Create timestamp for unique filenames
          TIMESTAMP=$(date +%F-%H-%M-%S)
          
          # Ensure we're authenticated
          export GOOGLE_APPLICATION_CREDENTIALS="${HOME}/firebase_credentials.json"
          
          # Check if files exist before uploading
          if [ -f "lynis-result.txt" ]; then
            echo "Uploading lynis-result.txt..."
            gsutil -m cp lynis-result.txt "gs://flutter-firebase-auth-b4967.appspot.com/lynis-results/${TIMESTAMP}-lynis-result.txt"
          else
            echo "Warning: lynis-result.txt not found"
          fi
          
          if [ -f "lynis_summary.png" ]; then
            echo "Uploading lynis_summary.png..."
            gsutil -m cp lynis_summary.png "gs://flutter-firebase-auth-b4967.appspot.com/lynis-results/${TIMESTAMP}-lynis-summary.png"
          else
            echo "Warning: lynis_summary.png not found"
          fi
          
          # Upload log files if they exist
          if [ -d "logs" ] && [ "$(ls -A logs)" ]; then
            echo "Uploading log files..."
            for file in logs/*; do
              if [ -f "$file" ]; then
                echo "Uploading $(basename "$file")..."
                gsutil -m cp "$file" "gs://flutter-firebase-auth-b4967.appspot.com/lynis-results/$(basename "$file")"
              fi
            done
          else
            echo "Warning: No log files found in logs directory"
          fi

      - name: Notify on failure
        if: failure()
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            try {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: 'Lynis Audit Failed',
                body: 'The automated security audit failed. Please check the workflow run for details.'
              });
            } catch (error) {
              console.error('Failed to create issue:', error.message);
            }