name: Lynis Security Audit

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 0 * * 0'  # Chạy mỗi Chủ nhật

jobs:
  security-audit:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
      issues: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
        cache: 'pip'

    - name: Install dependencies
      run: |
        if [ -f requirements.txt ]; then
          python -m pip install --upgrade pip
          pip install -r requirements.txt
        else
          echo "No requirements.txt found, skipping Python dependencies"
        fi

    - name: Create logs directory
      run: mkdir -p logs

    - name: Create Dockerfile
      run: |
        echo '
        FROM ubuntu:22.04

        RUN apt-get update && \
            apt-get install -y wget gnupg2 && \
            apt-get clean && \
            rm -rf /var/lib/apt/lists/*

        RUN echo "deb https://packages.cisofy.com/community/lynis/deb/ stable main" > /etc/apt/sources.list.d/cisofy-lynis.list && \
            wget -O - https://packages.cisofy.com/keys/cisofy-software-public.key | apt-key add -

        RUN apt-get update && \
            apt-get install -y lynis && \
            apt-get clean && \
            rm -rf /var/lib/apt/lists/*

        RUN mkdir -p /audit/logs

        WORKDIR /audit

        ENTRYPOINT ["lynis"]
        CMD ["audit", "system", "--no-colors", "--report-file", "/audit/logs/lynis-report.dat"]
        ' > Dockerfile

    - name: Build and test Docker image
      run: |
        docker build -t lynis-audit .
        docker run --rm lynis-audit --version

    - name: Run security audit
      run: |
        TIMESTAMP=$(date +%Y%m%d_%H%M%S)
        docker run --rm \
          --cap-add=SYS_ADMIN \
          --cap-add=AUDIT_CONTROL \
          -v "$(pwd)/logs:/audit/logs" \
          lynis-audit audit system --no-colors --report-file "/audit/logs/lynis-report-${TIMESTAMP}.dat"
      continue-on-error: true

    - name: Set up Node.js for Firebase
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install Firebase CLI
      if: always() && secrets.FIREBASE_TOKEN != ''
      run: npm install -g firebase-tools

    - name: Upload results to Firebase Storage
      if: always() && secrets.FIREBASE_TOKEN != ''
      env:
        FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
      run: |
        echo "Uploading logs to Firebase Storage"
        if [ "$(ls -A logs 2>/dev/null)" ]; then
          firebase login:ci --token "$FIREBASE_TOKEN"
          for file in logs/*; do
            if [ -f "$file" ]; then
              echo "Uploading $file"
              firebase storage:upload "$file" \
                --project flutter-firebase-auth-b4967 \
                --token "$FIREBASE_TOKEN" \
                --public \
                --path "/lynis-results/$(basename "$file")"
            fi
          done
        else
          echo "No log files found to upload"
        fi
      continue-on-error: true

    - name: Upload logs as artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: lynis-audit-logs
        path: logs/
        retention-days: 7

    - name: Notify on failure
      if: failure()
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: 'Lynis Audit Failed',
            body: `The automated security audit failed on ${new Date().toISOString()}.\nPlease check the workflow run: ${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`
          })
